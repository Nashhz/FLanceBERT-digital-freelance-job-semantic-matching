import cx_Oracle
import pandas as pd

def fetch_job_descriptions():
    """
    Fetch job descriptions from the Oracle database.
    :return: DataFrame containing job details.
    """
    try:
        dsn = cx_Oracle.makedsn('localhost', 1521, service_name='XE')
        connection = cx_Oracle.connect(user='FYP_01', password='system', dsn=dsn)
        print("Connected to Oracle database successfully.")

        with connection.cursor() as cursor:
            query = "SELECT id, title, description, time_submitted, currency, budget, status, posted_date FROM projects"
            cursor.execute(query)
            rows = cursor.fetchall()
            columns = [col[0] for col in cursor.description]
            df = pd.DataFrame(rows, columns=columns)

            # Convert LOBs to strings
            df['DESCRIPTION'] = df['DESCRIPTION'].apply(lambda x: x.read() if hasattr(x, 'read') else str(x))

        print("Data loaded from Oracle database successfully.")
        return df
    except Exception as e:
        raise Exception(f"Error loading data from Oracle database: {e}")
    finally:
        if 'connection' in locals():
            connection.close()

def create_matched_jobs_table(user_id):
    """
    Creates the matched_jobs table for a specific user if it does not exist.
    :param user_id: ID of the user for whom the table is created.
    """
    try:
        dsn = cx_Oracle.makedsn('localhost', 1521, service_name='XE')
        connection = cx_Oracle.connect(user='FYP_01', password='system', dsn=dsn)
        print("Connected to Oracle database successfully for table creation.")

        with connection.cursor() as cursor:
            # Construct table name dynamically for the user
            table_name = f"matched_jobs_user_{user_id}"
            
            # Check if the table exists
            cursor.execute(f"""
                SELECT COUNT(*)
                FROM all_tables
                WHERE table_name = UPPER('{table_name}')
            """)
            if cursor.fetchone()[0] == 0:
                # Create the table if it doesn't exist
                cursor.execute(f"""
                    CREATE TABLE {table_name} (
                        id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                        job_id NUMBER,
                        title VARCHAR2(255),
                        description CLOB,
                        time_submitted TIMESTAMP,
                        currency VARCHAR2(10),
                        budget VARCHAR2(50),
                        status VARCHAR2(50),
                        posted_date DATE,
                        similarity_score FLOAT
                    )
                """)
                print(f"Table {table_name} created successfully.")
            else:
                print(f"Table {table_name} already exists.")

        connection.commit()
    except Exception as e:
        raise Exception(f"Error creating matched_jobs table: {e}")
    finally:
        if 'connection' in locals():
            connection.close()
